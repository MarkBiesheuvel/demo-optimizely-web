const synthetics = require('Synthetics')

const URL = process.env.URL
const TIMEOUT_LONG = 8000 // 8 seconds
const TIMEOUT_SHORT = 2000 // 2 seconds
const SELECTOR_TEXT = '//*[contains(text(), "Amazing")]'
const SELECTOR_ADDTOCART = '[id="addtocart"]'
const SELECTOR_PURCHASE = '[id="purchase"]'

const click = async (page, selector) => {
  // Make sure element is on page
  await page.waitForSelector(selector, {
    timeout: TIMEOUT_SHORT
  })

  // Click on element
  await page.click(selector)

  // Wait for event to be pushed
  await page.waitForTimeout(TIMEOUT_SHORT)
}

const canary = async () => {
  let repetitions = 0

  // Set synthetics configuration
  synthetics.getConfiguration()
    .setConfig({
      includeRequestHeaders: true,
      includeResponseHeaders: true,
      includeRequestBody: true,
      includeResponseBody: true,
      screenshotOnStepStart: false,
      screenshotOnStepSuccess: false,
      screenshotOnStepFailure: false
    })

  // Open blank page
  const page = await synthetics.getPage()

  // Navigate to the initial url
  await synthetics.executeStep('navigateToUrl', async () => {
    await page.goto(URL, {
      waitUntil: ['load', 'networkidle0'],
      timeout: TIMEOUT_LONG
    })
  })

  // Determine which variation is shown by looking up some text
  await synthetics.executeStep('verifyText', async () => {
    await page.waitForXPath(SELECTOR_TEXT, {
      timeout: TIMEOUT_SHORT
    }).then(() => {
      repetitions = 3
    }).catch(() => {
      repetitions = 2
    })
  })

  // Click on buttons to generate events
  await synthetics.executeStep('click', async function () {
    for (let i = 0; i < repetitions; i++) {
      await click(page, SELECTOR_ADDTOCART)
      await click(page, SELECTOR_PURCHASE)
    }
  })
}

exports.handler = async () => {
  return await canary()
}
